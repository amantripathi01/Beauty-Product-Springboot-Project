/*
Test generated by RoostGPT for test java_spring_17Jan using AI Type Open AI and AI Model gpt-4

1. Positive Test Scenario: Check if the function returns the correct admin name when a valid admin name is set.

2. Negative Test Scenario: Check if the function returns null or an empty string when the admin name is not set.

3. Positive Test Scenario: Check if the function returns the updated admin name when the admin name is updated.

4. Negative Test Scenario: Check if the function returns the old admin name even after the admin name is updated.

5. Positive Test Scenario: Check if the function returns the correct admin name when called multiple times.

6. Edge Case Scenario: Check if the function correctly handles and returns special characters if they are part of the admin name.

7. Edge Case Scenario: Check if the function correctly handles and returns long admin names.

8. Edge Case Scenario: Check if the function correctly handles and returns admin names with white spaces.

9. Negative Test Scenario: Check if the function returns an error when trying to fetch an admin name from a non-existent or deleted admin.

10. Positive Test Scenario: Check if the function returns the correct admin name when called simultaneously from different threads (to validate thread-safety).
*/
package com.business.entities;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import static org.junit.jupiter.api.Assertions.*;

public class Admin_getAdminName_6dc55da125_Test {

    private Admin admin;

    @BeforeEach
    public void setUp() {
        admin = new Admin();
    }

    @Test
    public void testGetAdminName_ValidAdminName() {
        admin.setAdminName("John Doe");
        String adminName = admin.getAdminName();
        assertEquals("John Doe", adminName);
    }

    @Test
    public void testGetAdminName_EmptyAdminName() {
        admin.setAdminName("");
        String adminName = admin.getAdminName();
        assertEquals("", adminName);
    }

    @Test
    public void testGetAdminName_UpdateAdminName() {
        admin.setAdminName("John Doe");
        admin.setAdminName("Jane Doe");
        String adminName = admin.getAdminName();
        assertEquals("Jane Doe", adminName);
    }

    @Test
    public void testGetAdminName_OldAdminNameAfterUpdate() {
        admin.setAdminName("John Doe");
        String oldAdminName = admin.getAdminName();
        admin.setAdminName("Jane Doe");
        assertNotEquals(oldAdminName, admin.getAdminName());
    }

    @Test
    public void testGetAdminName_MultipleCalls() {
        admin.setAdminName("John Doe");
        assertEquals("John Doe", admin.getAdminName());
        assertEquals("John Doe", admin.getAdminName());
        assertEquals("John Doe", admin.getAdminName());
    }

    @Test
    public void testGetAdminName_SpecialCharacters() {
        admin.setAdminName("@John#Doe$");
        String adminName = admin.getAdminName();
        assertEquals("@John#Doe$", adminName);
    }

    @Test
    public void testGetAdminName_LongAdminName() {
        String longAdminName = "JohnJohnJohnJohnJohnJohnJohnJohnJohnJohnDoeDoeDoeDoeDoeDoeDoeDoeDoeDoe";
        admin.setAdminName(longAdminName);
        String adminName = admin.getAdminName();
        assertEquals(longAdminName, adminName);
    }

    @Test
    public void testGetAdminName_AdminNameWithSpaces() {
        admin.setAdminName("John    Doe");
        String adminName = admin.getAdminName();
        assertEquals("John    Doe", adminName);
    }

    @Test
    public void testGetAdminName_NonExistentAdmin() {
        Admin nonExistentAdmin = null;
        assertThrows(NullPointerException.class, () -> nonExistentAdmin.getAdminName());
    }

    @Test
    public void testGetAdminName_ThreadSafety() throws InterruptedException {
        Thread thread1 = new Thread(() -> admin.setAdminName("John Doe"));
        Thread thread2 = new Thread(() -> admin.setAdminName("Jane Doe"));
        thread1.start();
        thread2.start();
        thread1.join();
        thread2.join();
        String adminName = admin.getAdminName();
        assertTrue(adminName.equals("John Doe") || adminName.equals("Jane Doe"));
    }

    @AfterEach
    public void tearDown() {
        admin = null;
    }
}
