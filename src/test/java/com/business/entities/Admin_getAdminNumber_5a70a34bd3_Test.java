/*
Test generated by RoostGPT for test java_spring_17Jan using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the method returns the correct admin number.
   - Given: An instance of the class with a predefined admin number.
   - When: The getAdminNumber method is called.
   - Then: The method should return the predefined admin number.

2. Scenario: Check if the method returns null when the admin number is not set.
   - Given: An instance of the class without a predefined admin number.
   - When: The getAdminNumber method is called.
   - Then: The method should return null.

3. Scenario: Check if the method returns the correct admin number after it has been changed.
   - Given: An instance of the class with a predefined admin number.
   - When: The admin number is changed and the getAdminNumber method is called.
   - Then: The method should return the new admin number.

4. Scenario: Check if the method returns the correct admin number after it has been set to null.
   - Given: An instance of the class with a predefined admin number.
   - When: The admin number is set to null and the getAdminNumber method is called.
   - Then: The method should return null.

5. Scenario: Check if the method works correctly with different types of admin numbers (assuming the admin number can be of different formats).
   - Given: An instance of the class with different types of admin numbers (e.g., with special characters, numbers, letters, etc.).
   - When: The getAdminNumber method is called.
   - Then: The method should return the admin number in its original format.

6. Scenario: Check if the method returns the correct admin number in a multi-threaded environment.
   - Given: Multiple threads are modifying and reading the admin number.
   - When: The getAdminNumber method is called.
   - Then: The method should always return the latest admin number.
*/
package com.business.entities;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class Admin_getAdminNumber_5a70a34bd3_Test {
    private Admin admin;

    @Before
    public void setUp() {
        admin = new Admin();
    }

    @Test
    public void testGetAdminNumber() {
        String adminNumber = "1234567890";
        admin.setAdminNumber(adminNumber);
        assertEquals(adminNumber, admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberWhenNotSet() {
        assertNull(admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberAfterChange() {
        String originalAdminNumber = "1234567890";
        String newAdminNumber = "0987654321";
        admin.setAdminNumber(originalAdminNumber);
        admin.setAdminNumber(newAdminNumber);
        assertEquals(newAdminNumber, admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberAfterSetToNull() {
        String originalAdminNumber = "1234567890";
        admin.setAdminNumber(originalAdminNumber);
        admin.setAdminNumber(null);
        assertNull(admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberWithDifferentFormats() {
        String adminNumber = "AB123-XYZ";
        admin.setAdminNumber(adminNumber);
        assertEquals(adminNumber, admin.getAdminNumber());
    }

    @Test
    public void testGetAdminNumberInMultithreadedEnvironment() throws InterruptedException {
        String originalAdminNumber = "1234567890";
        String newAdminNumber = "0987654321";

        admin.setAdminNumber(originalAdminNumber);

        Thread t1 = new Thread(() -> admin.setAdminNumber(newAdminNumber));
        Thread t2 = new Thread(() -> assertEquals(newAdminNumber, admin.getAdminNumber()));

        t1.start();
        t1.join();

        t2.start();
        t2.join();
    }
}
